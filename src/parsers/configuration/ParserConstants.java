/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */
// Copyright (c) 2013 Mikhail Afanasov and DeepSe group. All rights reserved.// Use of this source code is governed by a BSD-style license that can be// found in the LICENSE file.
package parsers.configuration;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int CONTEXTGROUP = 9;
  /** RegularExpression Id. */
  int CONFIGURATION = 10;
  /** RegularExpression Id. */
  int LAYERED = 11;
  /** RegularExpression Id. */
  int IMPLEMENTATION = 12;
  /** RegularExpression Id. */
  int ISDEFAULT = 13;
  /** RegularExpression Id. */
  int CONTEXTS = 14;
  /** RegularExpression Id. */
  int COMPONENTS = 15;
  /** RegularExpression Id. */
  int USES = 16;
  /** RegularExpression Id. */
  int PROVIDES = 17;
  /** RegularExpression Id. */
  int INTERFACE = 18;
  /** RegularExpression Id. */
  int AS = 19;
  /** RegularExpression Id. */
  int LEXEME = 20;
  /** RegularExpression Id. */
  int EQUALS = 21;
  /** RegularExpression Id. */
  int RARROW = 22;
  /** RegularExpression Id. */
  int LARROW = 23;
  /** RegularExpression Id. */
  int SEMICOLON = 24;
  /** RegularExpression Id. */
  int COMMA = 25;
  /** RegularExpression Id. */
  int OCB = 26;
  /** RegularExpression Id. */
  int CCB = 27;
  /** RegularExpression Id. */
  int ORB = 28;
  /** RegularExpression Id. */
  int CRB = 29;
  /** RegularExpression Id. */
  int FULLNAME = 30;
  /** RegularExpression Id. */
  int NAME = 31;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int ML_COMMENT_STATE = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<token of kind 1>",
    "\"/*\"",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"*/\"",
    "<token of kind 8>",
    "\"context configuration\"",
    "\"configuration\"",
    "\"layered\"",
    "\"implementation\"",
    "\"is default\"",
    "\"contexts\"",
    "\"components\"",
    "\"uses\"",
    "\"provides\"",
    "\"interface\"",
    "\"as\"",
    "<LEXEME>",
    "\"=\"",
    "\"->\"",
    "\"<-\"",
    "\";\"",
    "\",\"",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "<FULLNAME>",
    "<NAME>",
  };

}
